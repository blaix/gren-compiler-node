module CLI.PrettyPrinter exposing
    ( Document
    --
    , empty
    , text
    , words
    , indent
    , block
    , verticalBlock
    --
    , Color(..)
    , color
    , intenseColor
    , stripColor
    --
    , ToStringOptions
    , defaultOptions
    , toString
    , toStringWithOptions
    )


import Math


type Document
    = Empty
    | Text String
    | Words (Array String)
    | Colorized { color : Color, intense : Bool, document : Document }
    | Indented Document
    | Block (Array Document)
    | VerticalBlock (Array Document)


empty : Document
empty =
    Empty


text : String -> Document
text str =
    str
        |> String.replace "\r" ""
        |> String.replace "\n" " "
        |> Text


words : String -> Document
words str =
    Words <| String.words str


indent : Document -> Document
indent doc =
    Indented doc


block : Array Document -> Document
block docs =
    Block docs


verticalBlock : Array Document -> Document
verticalBlock docs =
    VerticalBlock docs


-- COLORS


type Color
    = Black
    | Red
    | Green
    | Yellow 
    | Blue
    | Magenta
    | Cyan
    | White


color : Color -> Document -> Document
color clr doc =
    Colorized
        { color = clr
        , intense = False
        , document = doc
        }


intenseColor : Color -> Document -> Document
intenseColor clr doc =
    Colorized
        { color = clr
        , intense = True
        , document = doc
        }


stripColor : Document -> Document
stripColor doc =
    case doc of
        Empty ->
            doc
            
        Text _ ->
            doc

        Words _ ->
            doc
        
        Colorized { document = colorizedDocument } ->
            colorizedDocument
        
        Indented document ->
            Indented <| stripColor document
        
        Block docs ->
            Block <| Array.map stripColor docs
                
        VerticalBlock docs ->
            VerticalBlock <| Array.map stripColor docs


ansiColorCode : Color -> Bool -> String
ansiColorCode clr intense =
    let
        baseValue =
            case clr of
                Black -> 30
                Red -> 31
                Green -> 32
                Yellow -> 33
                Blue -> 34
                Magenta -> 35
                Cyan -> 36
                White -> 37

        appliedIntensity =
            if intense then
                baseValue + 60

            else
                baseValue
    in
    String.fromInt appliedIntensity


ansiColorEscapePrefix : String
ansiColorEscapePrefix =
    "\u{001b}["


-- RUN


toString : Document -> String
toString doc =
    toStringWithOptions defaultOptions doc


type alias ToStringOptions =
    { maxColumns : Int
    , indentationSize : Int
    , newlineSeparator : String
    }


defaultOptions : ToStringOptions
defaultOptions =
    { maxColumns = Math.maxSafeInteger
    , indentationSize = 4
    , newlineSeparator = "\n"
    }


toStringWithOptions : ToStringOptions -> Document -> String
toStringWithOptions { maxColumns, indentationSize, newlineSeparator } doc =
    toStringHelper 
        "" 
        (\currentIndent -> String.repeat indentationSize " " ++ currentIndent) 
        maxColumns
        newlineSeparator
        doc


toStringHelper : String -> (String -> String) -> Int -> String -> Document -> String
toStringHelper indentPrefix nextIndent maxColumns newlineSeparator doc =
    case doc of
        Empty ->
            ""
            
        Text str ->
            let
                indentedText =
                    indentPrefix ++ str
            in
            if String.length indentedText > maxColumns then
                indentedText
                    |> splitByLength maxColumns
                    |> String.join newlineSeparator

            else
                indentedText

        Words parts ->
            let
                wordSplitter =
                    Array.foldl (addToWordSplitter maxColumns) emptyWordSplitter parts
            in
            Array.pushLast wordSplitter.currentLine wordSplitter.lines
                |> Array.map (\line -> String.join " " line)
                |> String.join newlineSeparator
        
        Colorized { color = clr, intense, document } ->
            String.join "" <|
                [ ansiColorEscapePrefix ++ ansiColorCode clr intense ++ "m"
                , toStringHelper indentPrefix nextIndent maxColumns newlineSeparator document
                , ansiColorEscapePrefix ++ "39m"
                ]
        
        Indented document ->
            toStringHelper (nextIndent indentPrefix) nextIndent maxColumns newlineSeparator document
        
        Block docs ->
            case Array.popFirst docs of
                Nothing ->
                    ""

                Just { first, rest } ->
                    Array.pushFirst 
                        (toStringHelper indentPrefix nextIndent maxColumns newlineSeparator first)
                        (Array.map (toStringHelper "" identity maxColumns newlineSeparator) rest)
                        |> String.join ""
        
        VerticalBlock docs ->
            docs
                |> Array.map (toStringHelper indentPrefix nextIndent maxColumns newlineSeparator)
                |> String.join newlineSeparator


splitByLength : Int -> String -> Array String
splitByLength size str =
    splitByLengthHelper size str []


splitByLengthHelper : Int -> String -> Array String -> Array String
splitByLengthHelper size str acc =
    if str == "" then
        acc

    else
        let
            first = String.left size str
            rest = String.dropLeft size str
        in
        splitByLengthHelper size rest (Array.pushLast first acc)


type alias WordSplitter =
    { currentLine : Array String
    , lines : Array (Array String)
    }


emptyWordSplitter : WordSplitter
emptyWordSplitter =
    { currentLine = []
    , lines = []
    }


addToWordSplitter : Int -> String -> WordSplitter -> WordSplitter
addToWordSplitter maxWidth str { currentLine, lines } =
    if currentLine == [] then
        { currentLine = [ str ]
        , lines = lines
        }
    else
        let
            currentWidth =
                String.join " " currentLine
                    |> String.length
        in
        if String.length str + currentWidth > maxWidth then
            addToWordSplitter maxWidth str
                { currentLine = []
                , lines = Array.pushLast currentLine lines
                }
        else
            { currentLine = Array.pushLast str currentLine
            , lines = lines
            }
