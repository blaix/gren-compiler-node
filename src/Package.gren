module Package exposing
    ( Package
    --
    , author
    , name
    --
    , fromString
    , cliParser
    --
    , toString
    , toJson
    )


{-| Functions for working with package identifiers.

@docs Package, author, name, fromString, cliParser, toString, toJson
-}


import CLI.Parser
import Json.Encode as Json


{-| A package is identified by a string in the following format:

    author/name

Where `author` represents the person, or organization, that built the package, and
`name` is... well, a name. A name should ideally describe the purpose of the package.

Both `author` and `name` can contain alphanumeric characters and a single dash as a seperator,
but no other characters.
-}
type Package
    = Package 
        { author : String
        , name : String
        }


{-| Retrieve the package author.
-}
author : Package -> String
author (Package fields) =
    fields.author


{-| Retrieve the package name.
-}
name : Package -> String
name (Package fields) =
    fields.name


{-| Attempt to convert a `String` into [Package](#Package).
-}
fromString : String -> Maybe Package
fromString str =
    when String.split "/" str is
        [ authorStr, nameStr ] ->
            let
                validAuthor =
                    (not <| String.isEmpty authorStr)
                        && (not <| String.startsWith "-" authorStr)
                        && (not <| String.endsWith "-" authorStr)
                        && (not <| String.contains "--" authorStr)
                        && String.all (\c -> c == '-' || Char.isAlphaNum c) authorStr
                    
                validName =
                    (not <| String.isEmpty nameStr)
                        && (not <| String.startsWith "-" nameStr)
                        && (not <| String.endsWith "-"  nameStr)
                        && (not <| String.contains "--"  nameStr)
                        && String.all (\c -> Char.isDigit c || Char.isLower c || c == '-') nameStr
            in
            if validAuthor && validName then
                when String.popFirst nameStr is
                    Just { first = firstChar } ->
                        if Char.isAlpha firstChar then
                            Just <|
                                Package
                                    { author = authorStr
                                    , name = nameStr
                                    }

                        else
                            Nothing

                    Nothing ->
                        Nothing

            else
                Nothing

        _ ->
            Nothing


{-| A parser for use with [CLI.Parser](#CLI.Parser).
-}
cliParser : CLI.Parser.ValueParser Package
cliParser =
    { singular = "package"
    , plural = "packages"
    , fn = fromString
    , examples =
        [ "gren-lang/core"
        , "robheghan/string-diff"
        ]
    }


{-| Turn [Package](#Package) into a `String`.
-}
toString : Package -> String
toString package =
    author package ++ "/" ++ name package


{-| Turn [Package](#Package) into `Json`.
-}
toJson: Package -> Json.Value
toJson package =
    Json.string <| toString package


