module SemanticVersion exposing 
    ( SemanticVersion
    , fromString
    , cliParser
    , toString
    , toJson
    )


{-| Semantic versions consist of three numbers, each having a specific
meaning. This module makes no attempt to enforce the semantic versioning
rules.

@docs SemanticVersion, fromString, cliParser, toString, toJson
-}


import CLI.Parser
import Json.Encode as Json


{-| A semantic version has three numbers, separated by a period.

* `major` signifies API compatibility. Two version with different `major` numbers, are likely
incompatible.
* `minor` represents additions. `1.0.0` should be compatible with `1.1.0`, but not the other way around.
* `patch` represents bug fixes. `1.0.0` and `1.0.1` has the same API, but the latter might be more stable.
-}
type alias SemanticVersion = 
    { major : Int
    , minor : Int
    , patch : Int
    }


{-| Convert a `String` into a [SemanticVersion](#SemanticVersion).
-}
fromString : String -> Maybe SemanticVersion
fromString str =
    let
        parts =
            str
            |> String.split "."
            |> Array.filterMap String.toInt
            |> Array.filter (\num -> num >= 0)
    in
    case parts of
        [ major, minor, patch ] ->
            Just
                { major = major
                , minor = minor
                , patch = patch
                }

        _ ->
            Nothing


{-| A parser for use with [CLI.Parser](#CLI.Parser).
-}
cliParser : CLI.Parser.ValueParser SemanticVersion
cliParser =
    { singular = "version"
    , plural = "versions"
    , fn = fromString
    , examples =
        [ "1.0.0"
        , "1.2.3"
        , "5.1.0"
        ]
    }


{-| Turn a [SemanticVersion](#SemanticVersion) into a `String`.
-}
toString : SemanticVersion -> String
toString { major, minor, patch } =
    String.fromInt major ++ "." ++ String.fromInt minor ++ "." ++ String.fromInt patch


{-| Turn a [SemanticVersion](#SemanticVersion) into `Json`.
-}
toJson : SemanticVersion -> Json.Value
toJson semver =
    Json.string <| toString semver

