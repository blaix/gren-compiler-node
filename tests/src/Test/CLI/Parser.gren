module Test.CLI.Parser exposing (tests)

import Expect exposing (Expectation)
import Test exposing (Test, describe, test)
import CLI.Parser as Parser
import FileSystem.Path as Path




tests : Test
tests =
    describe "CLI Parser"
        [ test "Parses successfully" <| \{} -> 
            expectParseSuccess testCmd testArgs <| \cmd ->
                Expect.equal (Path.fromPosixString "out") cmd.flags.output
        ] 


expectParseSuccess : Parser.Command args flags result -> Array String -> (result -> Expectation) -> Expectation
expectParseSuccess cmd args next =
    case Parser.run cmd args of
        Err _ ->
            Expect.fail "Failed to parse"

        Ok result ->
            next result


testArgs : Array String
testArgs =
    [ "make", "--debug", "--output=out", "src/Main.gren" ]


testCmd =
    { word =
        "make"
    , arguments =
        Parser.zeroOrMoreArgs Parser.grenFileParser
    , flags =
        Parser.initFlags 
            (\debug output ->
                { debug = debug
                , output = output
                }
            )
            |> Parser.onOff "debug" "debug desc"
            |> Parser.flag "output" Parser.pathParser "output path"
    , commonDescription =
        Just "make your project"
    , summary =
        "Makey make make"
    , example = "gren make src/Main.gren"
    , builder =
        \args flags ->
            { args = args
            , flags = flags
            }
    }
