module Test.CLI.Parser exposing (tests)

import Expect exposing (Expectation)
import Test exposing (Test, describe, test)
import CLI.Parser as Parser
import FileSystem.Path as Path




tests : Test
tests =
    describe "CLI Parser"
        [ test "Parses successfully" <| \{} -> 
            Expect.ok <| Parser.run testCmd testArgs
        , test "This particular test case even succeeds without args or flags" <| \{} ->
            Expect.ok <| Parser.run testCmd ["make"]
        , test "The command name is required" <| \{} ->
            Expect.err <| Parser.run testCmd []
        , describe "Args"
            [ test "Args in valid example is parsed correctly" <| \{} ->
                expectParseSuccess testCmd testArgs <| \cmd ->
                    Expect.equal
                        [ Path.fromPosixString "src/Main.gren" ]
                        cmd.args
            , test "Fails if passed arg fails the parser" <| \{} ->
                Parser.run testCmdOneArg [ "make", "src/Main" ]
                    |> Expect.equal (Err Parser.BadArguments)
            , describe "No args"
                [ test "Valid example parses to empty list when no args are passed" <| \{} ->
                    expectParseSuccess testCmd [ "make" ] <| \cmd ->
                        Expect.equal [] cmd.args
                , test "Passing no args when expecting none" <| \{} ->
                    expectParseSuccess { testCmd | arguments = Parser.noArgs [] } [ "make" ] <| \cmd ->
                        Expect.equal [] cmd.args
                , test "Passing args when expecting none" <| \{} ->
                    Parser.run { testCmd | arguments = Parser.noArgs [] } testArgs
                        |> Expect.equal (Err Parser.BadArguments)
                ]
            , describe "One arg" 
                [ test "Passing one arg when one is expected" <| \{} ->
                    expectParseSuccess testCmdOneArg testArgs <| \cmd ->
                        Expect.equal ( Path.fromPosixString "src/Main.gren" ) cmd.args
                , test "Passing no args when one is expected" <| \{} ->
                    Parser.run testCmdOneArg [ "make" ]
                        |> Expect.equal (Err Parser.BadArguments)
                , test "Passing multiple args when one is expected" <| \{} ->
                    Parser.run testCmdOneArg [ "make", "src/Main.gren", "Example.gren" ]
                        |> Expect.equal (Err Parser.BadArguments)
                ]
            , describe "Zero or more args" 
                [ test "Multiple args" <| \{} ->
                    expectParseSuccess testCmd [ "make", "src/Main.gren", "src/Logic.gren" ] <| \cmd ->
                        Expect.equal
                            [ Path.fromPosixString "src/Main.gren"
                            , Path.fromPosixString "src/Logic.gren"
                            ]
                            cmd.args
                ]
            ]
        , describe "Flags"
            [ test "Flags in valid example are parsed correctly" <| \{} -> 
                expectParseSuccess testCmd testArgs <| \cmd ->
                    Expect.equal 
                        { debug = True
                        , output = Just <| Path.fromPosixString "out"
                        }
                        cmd.flags
            , test "Leaving out a flag means it's Nothing" <| \{} ->
                expectParseSuccess testCmd [ "make" ] <| \cmd ->
                    Expect.equal Nothing cmd.flags.output
            , test "Leaving out a toggle flag means it's false" <| \{} -> 
                expectParseSuccess testCmd (Array.filter (\f -> f /= "--debug") testArgs) <| \cmd ->
                    Expect.equal False cmd.flags.debug
            , test "Passing a toggle flag that is defined as value flag fails" <| \{} ->
                Parser.run testCmd [ "make", "--output" ]
                    |> Expect.equal (Err Parser.BadFlags)
            , test "Passing a value flag without a set value fails" <| \{} ->
                Parser.run testCmd [ "make", "--output=" ]
                    |> Expect.equal (Err Parser.BadFlags)
            , test "Passing a value flag where a toggle was expected fails" <| \{} ->
                Parser.run testCmd [ "make", "--debug=true" ]
                    |> Expect.equal (Err Parser.BadFlags)
            ]
        ] 


expectParseSuccess : Parser.Command args flags result -> Array String -> (result -> Expectation) -> Expectation
expectParseSuccess cmd args next =
    case Parser.run cmd args of
        Err _ ->
            Expect.fail "Failed to parse"

        Ok result ->
            next result


testArgs : Array String
testArgs =
    [ "make", "--debug", "--output=out", "src/Main.gren" ]


testCmd =
    { word =
        "make"
    , arguments =
        Parser.zeroOrMoreArgs Parser.grenFileParser
    , flags =
        Parser.initFlags 
            (\debug output ->
                { debug = debug
                , output = output
                }
            )
            |> Parser.onOff "debug" "debug desc"
            |> Parser.flag "output" Parser.pathParser "output path"
    , commonDescription =
        Just "make your project"
    , summary =
        "Makey make make"
    , example = "gren make src/Main.gren"
    , builder =
        \args flags ->
            { args = args
            , flags = flags
            }
    }

testCmdOneArg =
    { word =
        "make"
    , arguments =
        Parser.oneArg Parser.grenFileParser
    , flags =
        Parser.initFlags 
            (\debug output ->
                { debug = debug
                , output = output
                }
            )
            |> Parser.onOff "debug" "debug desc"
            |> Parser.flag "output" Parser.pathParser "output path"
    , commonDescription =
        Just "make your project"
    , summary =
        "Makey make make"
    , example = "gren make src/Main.gren"
    , builder =
        \args flags ->
            { args = args
            , flags = flags
            }
    }
