module Test.CLI.PrettyPrinter exposing (tests)

import Expect exposing (Expectation)
import Test exposing (Test, describe, test)
import CLI.PrettyPrinter as PP


tests : Test
tests =
    describe "PrettyPrinter"
        [ test "empty returns the empty string" <| \{} -> 
            PP.empty
                |> PP.toString
                |> Expect.equal ""
        , test "text returns the provided text" <| \{} ->
            PP.text "Hello, world!"
                |> PP.toString
                |> Expect.equal "Hello, world!"
        , test "colorized returns provided text with ansi escape sequence" <| \{} ->
            PP.text "My green output"
                |> PP.color PP.Green
                |> PP.toString
                |> Expect.equal "\u{001b}[32mMy green output\u{001b}[39m"
        , test "intenseColor returns provided text with ansi escape sequence" <| \{} ->
            PP.text "My very green output"
                |> PP.intenseColor PP.Green
                |> PP.toString
                |> Expect.equal "\u{001b}[92mMy very green output\u{001b}[39m"
        , test "Colors can be stripped" <| \{} ->
            PP.verticalBlock
                [ PP.text "one"
                , PP.color PP.Green <| PP.text "two"
                , PP.text "three"
                ]
                |> PP.stripColor
                |> PP.toString
                |> Expect.equal
                    ( PP.verticalBlock
                        [ PP.text "one"
                        , PP.text "two"
                        , PP.text "three"
                        ]
                        |> PP.toString
                    )
        , test "indent adds leading whitespace" <| \{} ->
            PP.text "My indented text"
                |> PP.indent
                |> PP.toString
                |> Expect.equal "    My indented text"
        , test "blocks joins things together" <| \{} ->
            PP.block
                [ PP.text "First part"
                , PP.text "Second part"
                , PP.text "Third part"
                ]
                |> PP.toString
                |> Expect.equal "First partSecond partThird part"
        , test "blocks joins things together into a single line, indents do nothing" <| \{} ->
            PP.block
                [ PP.text "First part"
                , PP.text "Second part"
                    |> PP.indent
                , PP.text "Third part"
                    |> PP.indent
                ]
                |> PP.toString
                |> Expect.equal "First partSecond partThird part"
        , test "except for the first line" <| \{} ->
            PP.block
                [ PP.text "First part"
                    |> PP.indent
                , PP.text "Second part"
                , PP.text "Third part"
                ]
                |> PP.toString
                |> Expect.equal "    First partSecond partThird part"
        , test "vertical blocks joins things together by newlines" <| \{} ->
            PP.verticalBlock
                [ PP.text "First part"
                , PP.text "Second part"
                    |> PP.indent
                , PP.text "Third part"
                    |> PP.indent
                ]
                |> PP.toString
                |> Expect.equal
                    """
                    First part
                        Second part
                        Third part
                    """
        , test "indents can be nested" <| \{} ->
            PP.verticalBlock
                [ PP.text "First part"
                , PP.indent <|
                    PP.verticalBlock
                        [ PP.text "Second part"
                        , PP.indent <|
                            PP.text "Third part"
                        ]
                ]
                |> PP.toString
                |> Expect.equal
                    """
                    First part
                        Second part
                            Third part
                    """
        , test "nested indents work correctly through nested blocks" <| \{} ->
            PP.verticalBlock
                [ PP.text "First part"
                , PP.indent <|
                    PP.verticalBlock
                        [ PP.verticalBlock
                            [ PP.text "Second part"
                            , PP.indent <|
                                PP.text "Third part"
                            ]
                        ]
                ]
                |> PP.toString
                |> Expect.equal
                    """
                    First part
                        Second part
                            Third part
                    """
        , test "nested indents work correctly through regular blocks" <| \{} ->
            PP.verticalBlock
                [ PP.text "First part"
                , PP.indent <|
                    PP.verticalBlock
                        [ PP.block
                            [ PP.text "Second part"
                            , PP.text "Third part"
                            ]
                        ]
                ]
                |> PP.toString
                |> Expect.equal
                    """
                    First part
                        Second partThird part
                    """
        , test "indents work correctly through colorized block" <| \{} ->
            PP.verticalBlock
                [ PP.text "First part"
                ]
                |> PP.indent
                |> PP.color PP.Cyan
                |> PP.toString
                |> Expect.equal
                    "\u{001b}[36m    First part\u{001b}[39m"
        ]
        
